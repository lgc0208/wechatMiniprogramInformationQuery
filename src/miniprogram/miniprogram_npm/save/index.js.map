{"version":3,"sources":["save.js","memory-engine.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = function (name, opts) {\n\n  var engine\n    , defaults =\n      { idProperty: '_id'\n      , logger: { info: console.info, verbose: console.info }\n      , engine: undefined\n      , debug: true\n      }\n    , options = Object.assign({}, defaults, opts)\n\n  if (typeof name !== 'string') {\n    throw new Error('A string must be provided for \\'name\\'')\n  }\n\n  // If no engine is passed then default to the memory engine.\n  engine = options.engine || require('./memory-engine')(\n    { idProperty: options.idProperty })\n\n  // Only log in debug mode\n  if (options.debug) {\n\n    engine.on('create', function (object) {\n      options.logger.info('Creating \\'' + name + '\\'', JSON.stringify(object))\n    })\n\n    engine.on('update', function (object, overwrite) {\n      options.logger.info('Updating \\'' + name + '\\'', JSON.stringify(object)\n        , ' with overwrite ', overwrite)\n    })\n\n    engine.on('updateMany', function (query) {\n      options.logger.info('Updating many \\'' + name + '\\'', JSON.stringify(query))\n    })\n\n    engine.on('delete', function (id) {\n      options.logger.info('Deleting \\'' + name + '\\'', id)\n    })\n\n    engine.on('deleteMany', function (query) {\n      options.logger.info('Deleting many \\'' + name + '\\'', JSON.stringify(query))\n    })\n\n    engine.on('read', function (id) {\n      options.logger.info('Reading \\'' + name + '\\'', id)\n    })\n\n    engine.on('find', function (query, queryOptions) {\n      options.logger.info('Finding \\'' + name + '\\'', JSON.stringify(query) , JSON.stringify(queryOptions))\n    })\n\n    engine.on('findOne', function (query, queryOptions) {\n      options.logger.info('Finding One \\'' + name + '\\'', JSON.stringify(query) , JSON.stringify(queryOptions))\n    })\n\n    engine.on('count', function (query) {\n      options.logger.info('Count \\'' + name + '\\'', JSON.stringify(query))\n    })\n\n    engine.on('error', function (error) {\n      options.logger.error('Error with \\'' + name + '\\'', error)\n    })\n  }\n\n  return engine\n}\n","var emptyFn = function () {}\n  , Mingo = require('mingo')\n  , es = require('event-stream')\n\nmodule.exports = function (opts) {\n  var options = Object.assign({ idProperty: '_id' }, opts)\n    , self = es.map(createOrUpdate)\n    , data = []\n    , idSeq = 0\n\n  Mingo.setup({ key: options.idProperty })\n\n  function findById(id) {\n    var query = {}\n    query[ options.idProperty ] = id\n    return Mingo.find(data, query).first()\n  }\n\n  /**\n   * Checks that the object has the ID property present, then checks\n   * if the data object has that ID value present.e\n   *\n   * Returns an Error to the callback if either of the above checks fail\n   *\n   * @param {Object} object to check\n   * @param {Function} callback\n   * @api private\n   */\n  function checkForIdAndData(object, callback) {\n    var id = object[options.idProperty]\n      , foundObject\n    if (id === undefined || id === null) {\n      return callback(new Error('Object has no \\''\n        + options.idProperty + '\\' property'))\n    }\n\n    foundObject = findById(id)\n\n    if (foundObject === null) {\n      return callback(new Error('No object found with \\''\n        + options.idProperty + '\\' = \\'' + id + '\\''))\n    }\n\n    return callback(null, foundObject)\n  }\n\n  /**\n   * Create a new entity. Emits a 'create' event.\n   *\n   * @param {Object} object to create\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function create(object, callback) {\n    self.emit('create', object)\n    callback = callback || emptyFn\n    // clone the object\n    var extendedObject = Object.assign({}, object)\n\n    if (!extendedObject[options.idProperty]) {\n      idSeq += 1\n      extendedObject[options.idProperty] = '' + idSeq\n    } else {\n      if (findById(extendedObject[options.idProperty]) !== null) {\n        return callback(new Error('Key ' + extendedObject[options.idProperty] + ' already exists'))\n      }\n      // if an id is provided, cast to string.\n      extendedObject[options.idProperty] = '' + extendedObject[options.idProperty]\n    }\n    data.push(Object.assign({}, extendedObject))\n    self.emit('afterCreate', extendedObject)\n    callback(undefined, extendedObject)\n  }\n\n  /**\n   * Create or update a entity. Emits a 'create' event or a 'update'.\n   *\n   * @param {Object} object to create or update\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function createOrUpdate(object, callback) {\n    if (typeof object[options.idProperty] === 'undefined') {\n      // Create a new object\n      self.create(object, callback)\n    } else {\n      // Try and find the object first to update\n      var query = {}\n      query[options.idProperty] = object[options.idProperty]\n\n      self.findOne(query, function (err, foundObject) {\n        if (foundObject) {\n          // We found the object so update\n          self.update(object, callback)\n        } else {\n          // We didn't find the object so create\n          self.create(object, callback)\n        }\n      })\n    }\n  }\n\n  /**\n   * Reads a single entity. Emits a 'read' event.\n   *\n   * @param {Number} id to read\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function read(id, callback) {\n    var query = {}\n\n    self.emit('read', id)\n    callback = callback || emptyFn\n    query[options.idProperty] = '' + id\n    findByQuery(query, {}, function (error, objects) {\n      if (objects[0] !== undefined) {\n        var cloned = Object.assign({}, objects[0])\n        self.emit('received', cloned)\n        callback(undefined, cloned)\n      } else {\n        callback(undefined, undefined)\n      }\n    })\n  }\n\n  /**\n   * Updates a single entity. Emits an 'update' event. Optionally overwrites\n   * the entire entity, by default just Object.assigns it with the new values.\n   *\n   * @param {Object} object to update\n   * @param {Boolean} whether to overwrite or Object.assign the existing entity\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function update(object, overwrite, callback) {\n    if (typeof overwrite === 'function') {\n      callback = overwrite\n      overwrite = false\n    }\n    self.emit('update', object, overwrite)\n    callback = callback || emptyFn\n    var id = '' + object[options.idProperty]\n      , updatedObject\n\n    checkForIdAndData(object, function (error, foundObject) {\n      if (error) {\n        return callback(error)\n      }\n\n      if (overwrite) {\n        updatedObject = Object.assign({}, object)\n      } else {\n        updatedObject = Object.assign({}, foundObject, object)\n      }\n\n      var query = {}\n        , copy = Object.assign({}, updatedObject)\n      query[ options.idProperty ] = id\n      data = Mingo.remove(data, query)\n      data.push(updatedObject)\n      self.emit('afterUpdate', copy, overwrite)\n      callback(undefined, copy)\n    })\n  }\n\n  /**\n   * Deletes entities based on a query. Emits a 'delete' event. Performs a find\n   * by query, then calls delete for each item returned. Returns an error if no\n   * items match the query.\n   *\n   * @param {Object} query to delete on\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function deleteMany(query, callback) {\n    callback = callback || emptyFn\n    self.emit('deleteMany', query)\n    data = Mingo.remove(data, query)\n    self.emit('afterDeleteMany', query)\n    callback()\n  }\n\n  /**\n   * Deletes one entity. Emits a 'delete' event. Returns an error if the\n   * object can not be found or if the ID property is not present.\n   *\n   * @param {Object} object to delete\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function del(id, callback) {\n\n    callback = callback || emptyFn\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function or empty')\n    }\n\n    self.emit('delete', id)\n    var query = {}\n    query[ options.idProperty ] = id\n    deleteMany(query, function() {\n      self.emit('afterDelete', '' + id)\n      callback(undefined)\n    })\n  }\n\n  /**\n   * Performs a find on the data by search query.\n   *\n   * Sorting can be done similarly to mongo by providing a $sort option to\n   * the options object.\n   *\n   * The query can target fields in a subdocument similarly to mongo by passing\n   * a string reference to the subdocument in dot notation.\n   *\n   * @param {Object} query to search by\n   * @param {Object} search options\n   * @param {Function} callback\n   * @api private\n   */\n  function findByQuery(query, options, callback) {\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    var cursor = Mingo.find(data, query, options && options.fields)\n    if (options && options.sort) cursor = cursor.sort(options.sort)\n    if (options && options.limit) cursor = cursor.limit(options.limit)\n\n    var allData = getObjectCopies(cursor.all())\n\n    if (callback === undefined) {\n\n      return es.readArray(allData).pipe(es.map(function (data, cb) {\n          self.emit('received', data)\n          cb(null, data)\n        }))\n    } else {\n      callback(null, allData)\n    }\n\n  }\n\n  function getObjectCopies(objects) {\n    var copies = []\n    objects.forEach(function (object) {\n      copies.push(Object.assign({}, object))\n    })\n    return copies\n  }\n\n  /**\n   * Performs a find on the data. Emits a 'find' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function find(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    self.emit('find', query, options)\n    if (callback !== undefined) {\n      findByQuery(query, options, function(error, data) {\n        if (error) return callback(error)\n        self.emit('received', data)\n        callback(null, data)\n      })\n    } else {\n      return findByQuery(query, options)\n    }\n  }\n\n  /**\n   * Performs a find on the data and limits the result set to 1.\n   * Emits a 'findOne' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function findOne(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    self.emit('findOne', query, options)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects[0])\n      callback(undefined, objects[0])\n    })\n  }\n\n  /**\n   * Performs a count by query. Emits a 'count' event.\n   *\n   * @param {Object} query to search by\n   * @param {Function} callback\n   * @api public\n   */\n  function count(query, callback) {\n    self.emit('count', query)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects.length)\n      callback(undefined, objects.length)\n    })\n  }\n\n  Object.assign(self\n    , { create: create\n      , read: read\n      , update: update\n      , 'delete': del\n      , deleteMany: deleteMany\n      , find: find\n      , findOne: findOne\n      , count: count\n      , idProperty: options.idProperty\n      , createOrUpdate: createOrUpdate\n      })\n\n  return self\n\n}\n"]}