{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\n\nvar Stream = require('stream')\n\n// from\n//\n// a stream that reads from an source.\n// source may be an array, or a function.\n// from handles pause behaviour for you.\n\nmodule.exports =\nfunction from (source) {\n  if(Array.isArray(source)) {\n\t\tvar source_index = 0, source_len = source.length;\n    return from (function (i) {\n      if(source_index < source_len)\n        this.emit('data', source[source_index++])\n      else\n        this.emit('end')\n      return true\n    })\n  }\n  var s = new Stream(), i = 0\n  s.ended = false\n  s.started = false\n  s.readable = true\n  s.writable = false\n  s.paused = false\n  s.ended = false\n  s.pause = function () {\n    s.started = true\n    s.paused = true\n  }\n  function next () {\n    s.started = true\n    if(s.ended) return\n    while(!s.ended && !s.paused && source.call(s, i++, function () {\n      if(!s.ended && !s.paused)\n          process.nextTick(next);\n    }))\n      ;\n  }\n  s.resume = function () {\n    s.started = true\n    s.paused = false\n    next()\n  }\n  s.on('end', function () {\n    s.ended = true\n    s.readable = false\n    process.nextTick(s.destroy)\n  })\n  s.destroy = function () {\n    s.ended = true\n    s.emit('close') \n  }\n  /*\n    by default, the stream will start emitting at nextTick\n    if you want, you can pause it, after pipeing.\n    you can also resume before next tick, and that will also\n    work.\n  */\n  process.nextTick(function () {\n    if(!s.started) s.resume()\n  })\n  return s\n}\n"]}